package ntlmproxy;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.util.Enumeration;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.NTCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.HeadMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NTLMProxy extends HttpServlet {

	static final Logger log = LoggerFactory.getLogger(NTLMProxy.class);

	String password, username, domain;

	HttpClient client;

	public void init() throws ServletException {
		// TODO Auto-generated method stub
		super.init();
		username = this.getServletContext().getInitParameter(
				Main.PROXY_DELEGATE_USERNAME);
		password = this.getServletContext().getInitParameter(
				Main.PROXY_DELEGATE_PASSWORD);
		domain = this.getServletContext().getInitParameter(
				Main.PROXY_DELEGATE_DOMAIN);
	}

	String makeURL(HttpServletRequest arg0) {
		StringBuffer url = arg0.getRequestURL();
		if (arg0.getQueryString() != null) {
			url.append('?');
			url.append(arg0.getQueryString());
		}
		log.debug(url.toString());
		return url.toString();

	}

	void doIt(HttpServletRequest arg0, HttpServletResponse arg1,
			HttpMethod method) throws IOException {
		method.setFollowRedirects(false);
		method.getParams().makeLenient();

		for (Enumeration e = arg0.getHeaderNames(); e.hasMoreElements();) {
			String header = (String) e.nextElement();
			method.setRequestHeader(header, arg0.getHeader(header));
		}

		client.executeMethod(method);

		Header[] headers = method.getResponseHeaders();
		for (int i = 0; i < headers.length; i++) {
			arg1.setHeader(headers[i].getName(), headers[i].getValue());
		}
		arg1.setStatus(method.getStatusCode());
		log.debug(method.getStatusLine().toString());
		InputStream is = method.getResponseBodyAsStream();
		if (is != null) {
			copy(is, arg1.getOutputStream());
			is.close();
			arg1.getOutputStream().close();
		}

		method.releaseConnection();
		if (log.isDebugEnabled()) {
			MultiThreadedHttpConnectionManager manager = (MultiThreadedHttpConnectionManager) client
					.getHttpConnectionManager();
			log.debug("Pool: "
					+ manager.getConnectionsInPool()
					+ "/"
					+ manager.getParams().getMaxConnectionsPerHost(
							client.getHostConfiguration()));
		}

	}

	protected void doGet(HttpServletRequest arg0, HttpServletResponse arg1)
			throws ServletException, IOException {
		doIt(arg0, arg1, new GetMethod(makeURL(arg0)));
	}

	protected void doPost(HttpServletRequest arg0, HttpServletResponse arg1)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doIt(arg0, arg1, new PostMethod(makeURL(arg0)));
	}

	public final static void copy(InputStream is, OutputStream out)
			throws IOException {
		byte[] buffer = new byte[8192];
		int read;
		while ((read = is.read(buffer)) != -1)
			out.write(buffer, 0, read);

	}

	protected void doHead(HttpServletRequest arg0, HttpServletResponse arg1)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doIt(arg0, arg1, new HeadMethod(makeURL(arg0)));
	}

}
